require 'ostruct'
<#--  require 'fusionauth/rest_client'  -->

#
# Copyright (c) 2018-2019, FusionAuth, All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#

defmodule FusionAuthClient do
  @moduledoc """
  This module is the the Elixir client library for the FusionAuth CIAM Platform {https://fusionauth.io}.

  The API access uses the Tesla library and relies on the caller passing in a FusionAuth base URL, API Key and Tenant ID to create a client. The client is then passed into all API calls.

  The API returns a 3 element tuple. If the API HTTP status code is less the 300 (ie. suceeded) it returns :ok, the HTTP body as a map and the full Tesla Env if you need to access more data about the return. If the API HTTP status code is greater than 300. it returns :error, the HTTP body and the Telsa Env. If the API doesn't return at all it should return :error, a blank map and the error from Tesla.
  """

  alias FusionAuthUtilities, as: Utilities

  @doc """
  Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
  "actioner". Both user ids are required in the request object.

  ## Parameters

    - request: [ActionRequest] [The action request that includes all of the information about the action being taken including, the id of the action, any options and the duration (if applicable).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec action_user(request :: ActionRequest) :: FusionAuth.ClientResponse()
  def action_user(request) do
    start
    |> uri("/api/user/action")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Adds a user to an existing family. The family id must be specified.

  ## Parameters

    - family_id: [String.t()] [The id of the family.]
  ## Parameters

    - request: [FamilyRequest] [The request object that contains all of the information used to determine which user to add to the family.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec add_user_to_family(family_id :: String.t(), request :: FamilyRequest) :: FusionAuth.ClientResponse()
  def add_user_to_family(family_id, request) do
    start
    |> uri("/api/user/family")
    |> url_segment(family_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Cancels the user action.

  ## Parameters

    - action_id: [String.t()] [The action id of the action to cancel.]
  ## Parameters

    - request: [ActionRequest] [The action request that contains the information about the cancellation.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec cancel_action(action_id :: String.t(), request :: ActionRequest) :: FusionAuth.ClientResponse()
  def cancel_action(action_id, request) do
    start
    |> uri("/api/user/action")
    |> url_segment(action_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> delete()
    |> go()
  end

  @doc """
  Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
  and they clicked on a link to reset their password.

  ## Parameters

    - change_password_id: [String.t()] [The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.]
  ## Parameters

    - request: [ChangePasswordRequest] [The change password request that contains all of the information used to change the password.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec change_password(change_password_id :: String.t(), request :: ChangePasswordRequest) :: FusionAuth.ClientResponse()
  def change_password(change_password_id, request) do
    start
    |> uri("/api/user/change-password")
    |> url_segment(change_password_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
  bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
  method.

  ## Parameters

    - request: [ChangePasswordRequest] [The change password request that contains all of the information used to change the password.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec change_password_by_identity(request :: ChangePasswordRequest) :: FusionAuth.ClientResponse()
  def change_password_by_identity(request) do
    start
    |> uri("/api/user/change-password")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Adds a comment to the user's account.

  ## Parameters

    - request: [UserCommentRequest] [The request object that contains all of the information used to create the user comment.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec comment_on_user(request :: UserCommentRequest) :: FusionAuth.ClientResponse()
  def comment_on_user(request) do
    start
    |> uri("/api/user/comment")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.

  ## Parameters

    - application_id: [String.t()] [(Optional) The Id to use for the application. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [ApplicationRequest] [The request object that contains all of the information used to create the application.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_application(application_id :: String.t() || nil, request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def create_application(application_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a new role for an application. You must specify the id of the application you are creating the role for.
  You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to create the role on.]
  ## Parameters

  ## Parameters

    - role_id: [String.t()] [(Optional) The Id of the role. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [ApplicationRequest] [The request object that contains all of the information used to create the application role.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_application_role(application_id :: String.t(), role_id :: String.t() || nil, request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def create_application_role(application_id, role_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_segment("role")
    |> url_segment(role_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
  make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
  written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.

  ## Parameters

    - request: [AuditLogRequest] [The request object that contains all of the information used to create the audit log entry.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_audit_log(request :: AuditLogRequest) :: FusionAuth.ClientResponse()
  def create_audit_log(request) do
    start
    |> uri("/api/system/audit-log")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a connector.  You can optionally specify an Id for the connector, if not provided one will be generated.

  ## Parameters

    - connector_id: [String.t()] [(Optional) The Id for the connector. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [ConnectorRequest] [The request object that contains all of the information used to create the connector.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_connector(connector_id :: String.t() || nil, request :: ConnectorRequest) :: FusionAuth.ClientResponse()
  def create_connector(connector_id, request) do
    start
    |> uri("/api/connector")
    |> url_segment(connector_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.

  ## Parameters

    - consent_id: [String.t()] [(Optional) The Id for the consent. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [ConsentRequest] [The request object that contains all of the information used to create the consent.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_consent(consent_id :: String.t() || nil, request :: ConsentRequest) :: FusionAuth.ClientResponse()
  def create_consent(consent_id, request) do
    start
    |> uri("/api/consent")
    |> url_segment(consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.

  ## Parameters

    - email_template_id: [String.t()] [(Optional) The Id for the template. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [EmailTemplateRequest] [The request object that contains all of the information used to create the email template.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_email_template(email_template_id :: String.t() || nil, request :: EmailTemplateRequest) :: FusionAuth.ClientResponse()
  def create_email_template(email_template_id, request) do
    start
    |> uri("/api/email/template")
    |> url_segment(email_template_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
  family, if not provided one will be generated.

  ## Parameters

    - family_id: [String.t()] [(Optional) The id for the family. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [FamilyRequest] [The request object that contains all of the information used to create the family.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_family(family_id :: String.t() || nil, request :: FamilyRequest) :: FusionAuth.ClientResponse()
  def create_family(family_id, request) do
    start
    |> uri("/api/user/family")
    |> url_segment(family_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a form.  You can optionally specify an Id for the form, if not provided one will be generated.

  ## Parameters

    - form_id: [String.t()] [(Optional) The Id for the form. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [FormRequest] [The request object that contains all of the information used to create the form.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_form(form_id :: String.t() || nil, request :: FormRequest) :: FusionAuth.ClientResponse()
  def create_form(form_id, request) do
    start
    |> uri("/api/form")
    |> url_segment(form_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a form field.  You can optionally specify an Id for the form, if not provided one will be generated.

  ## Parameters

    - field_id: [String.t()] [(Optional) The Id for the form field. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [FormFieldRequest] [The request object that contains all of the information used to create the form field.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_form_field(field_id :: String.t() || nil, request :: FormFieldRequest) :: FusionAuth.ClientResponse()
  def create_form_field(field_id, request) do
    start
    |> uri("/api/form/field")
    |> url_segment(field_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.

  ## Parameters

    - group_id: [String.t()] [(Optional) The Id for the group. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [GroupRequest] [The request object that contains all of the information used to create the group.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_group(group_id :: String.t() || nil, request :: GroupRequest) :: FusionAuth.ClientResponse()
  def create_group(group_id, request) do
    start
    |> uri("/api/group")
    |> url_segment(group_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a member in a group.

  ## Parameters

    - request: [MemberRequest] [The request object that contains all of the information used to create the group member(s).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_group_members(request :: MemberRequest) :: FusionAuth.ClientResponse()
  def create_group_members(request) do
    start
    |> uri("/api/group/member")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.

  ## Parameters

    - identity_provider_id: [String.t()] [(Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [IdentityProviderRequest] [The request object that contains all of the information used to create the identity provider.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_identity_provider(identity_provider_id :: String.t() || nil, request :: IdentityProviderRequest) :: FusionAuth.ClientResponse()
  def create_identity_provider(identity_provider_id, request) do
    start
    |> uri("/api/identity-provider")
    |> url_segment(identity_provider_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.

  ## Parameters

    - lambda_id: [String.t()] [(Optional) The Id for the lambda. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [LambdaRequest] [The request object that contains all of the information used to create the lambda.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_lambda(lambda_id :: String.t() || nil, request :: LambdaRequest) :: FusionAuth.ClientResponse()
  def create_lambda(lambda_id, request) do
    start
    |> uri("/api/lambda")
    |> url_segment(lambda_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.

  ## Parameters

    - tenant_id: [String.t()] [(Optional) The Id for the tenant. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [TenantRequest] [The request object that contains all of the information used to create the tenant.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_tenant(tenant_id :: String.t() || nil, request :: TenantRequest) :: FusionAuth.ClientResponse()
  def create_tenant(tenant_id, request) do
    start
    |> uri("/api/tenant")
    |> url_segment(tenant_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.

  ## Parameters

    - theme_id: [String.t()] [(Optional) The Id for the theme. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [ThemeRequest] [The request object that contains all of the information used to create the theme.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_theme(theme_id :: String.t() || nil, request :: ThemeRequest) :: FusionAuth.ClientResponse()
  def create_theme(theme_id, request) do
    start
    |> uri("/api/theme")
    |> url_segment(theme_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.

  ## Parameters

    - user_id: [String.t()] [(Optional) The Id for the user. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [UserRequest] [The request object that contains all of the information used to create the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_user(user_id :: String.t() || nil, request :: UserRequest) :: FusionAuth.ClientResponse()
  def create_user(user_id, request) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
  that the user action can be applied to any user.

  ## Parameters

    - user_action_id: [String.t()] [(Optional) The Id for the user action. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [UserActionRequest] [The request object that contains all of the information used to create the user action.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_user_action(user_action_id :: String.t() || nil, request :: UserActionRequest) :: FusionAuth.ClientResponse()
  def create_user_action(user_action_id, request) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
  successfully. Anytime after that the user action reason can be used.

  ## Parameters

    - user_action_reason_id: [String.t()] [(Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [UserActionReasonRequest] [The request object that contains all of the information used to create the user action reason.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_user_action_reason(user_action_reason_id :: String.t() || nil, request :: UserActionReasonRequest) :: FusionAuth.ClientResponse()
  def create_user_action_reason(user_action_reason_id, request) do
    start
    |> uri("/api/user-action-reason")
    |> url_segment(user_action_reason_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a single User consent.

  ## Parameters

    - user_consent_id: [String.t()] [(Optional) The Id for the User consent. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [UserConsentRequest] [The request that contains the user consent information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_user_consent(user_consent_id :: String.t() || nil, request :: UserConsentRequest) :: FusionAuth.ClientResponse()
  def create_user_consent(user_consent_id, request) do
    start
    |> uri("/api/user/consent")
    |> url_segment(user_consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.

  ## Parameters

    - webhook_id: [String.t()] [(Optional) The Id for the webhook. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [WebhookRequest] [The request object that contains all of the information used to create the webhook.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec create_webhook(webhook_id :: String.t() || nil, request :: WebhookRequest) :: FusionAuth.ClientResponse()
  def create_webhook(webhook_id, request) do
    start
    |> uri("/api/webhook")
    |> url_segment(webhook_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Deactivates the application with the given Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to deactivate.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec deactivate_application(application_id :: String.t()) :: FusionAuth.ClientResponse()
  def deactivate_application(application_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> delete()
    |> go()
  end

  @doc """
  Deactivates the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to deactivate.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec deactivate_user(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def deactivate_user(user_id) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> delete()
    |> go()
  end

  @doc """
  Deactivates the user action with the given Id.

  ## Parameters

    - user_action_id: [String.t()] [The Id of the user action to deactivate.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec deactivate_user_action(user_action_id :: String.t()) :: FusionAuth.ClientResponse()
  def deactivate_user_action(user_action_id) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> delete()
    |> go()
  end

  @doc """
  Deactivates the users with the given ids.

  ## Parameters

    - user_ids: [list()] [The ids of the users to deactivate.]
  ## Parameters

  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.

  @deprecated This method has been renamed to deactivate_users_by_ids, use that method instead.
  """
  @spec deactivate_users(user_ids :: list()) :: FusionAuth.ClientResponse()
  def deactivate_users(user_ids) do
    start
    |> uri("/api/user/bulk")
    |> url_parameter("userId", user_ids)
    |> url_parameter("dryRun", false)
    |> url_parameter("hardDelete", false)
    |> delete()
    |> go()
  end

  @doc """
  Deactivates the users with the given ids.

  ## Parameters

    - user_ids: [list()] [The ids of the users to deactivate.]
  ## Parameters

  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec deactivate_users_by_ids(user_ids :: list()) :: FusionAuth.ClientResponse()
  def deactivate_users_by_ids(user_ids) do
    start
    |> uri("/api/user/bulk")
    |> url_parameter("userId", user_ids)
    |> url_parameter("dryRun", false)
    |> url_parameter("hardDelete", false)
    |> delete()
    |> go()
  end

  @doc """
  Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
  delete the application, any registrations for that application, metrics and reports for the application, all the
  roles for the application, and any other data associated with the application. This operation could take a very
  long time, depending on the amount of data in your database.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to delete.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_application(application_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_application(application_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_parameter("hardDelete", true)
    |> delete()
    |> go()
  end

  @doc """
  Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
  permanently removes the given role from all users that had it.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to deactivate.]
  ## Parameters

  ## Parameters

    - role_id: [String.t()] [The Id of the role to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_application_role(application_id :: String.t(), role_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_application_role(application_id, role_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_segment("role")
    |> url_segment(role_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the connector for the given Id.

  ## Parameters

    - connector_id: [String.t()] [The Id of the connector to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_connector(connector_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_connector(connector_id) do
    start
    |> uri("/api/connector")
    |> url_segment(connector_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the consent for the given Id.

  ## Parameters

    - consent_id: [String.t()] [The Id of the consent to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_consent(consent_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_consent(consent_id) do
    start
    |> uri("/api/consent")
    |> url_segment(consent_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the email template for the given Id.

  ## Parameters

    - email_template_id: [String.t()] [The Id of the email template to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_email_template(email_template_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_email_template(email_template_id) do
    start
    |> uri("/api/email/template")
    |> url_segment(email_template_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the form for the given Id.

  ## Parameters

    - form_id: [String.t()] [The Id of the form to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_form(form_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_form(form_id) do
    start
    |> uri("/api/form")
    |> url_segment(form_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the form field for the given Id.

  ## Parameters

    - field_id: [String.t()] [The Id of the form field to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_form_field(field_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_form_field(field_id) do
    start
    |> uri("/api/form/field")
    |> url_segment(field_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the group for the given Id.

  ## Parameters

    - group_id: [String.t()] [The Id of the group to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_group(group_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_group(group_id) do
    start
    |> uri("/api/group")
    |> url_segment(group_id)
    |> delete()
    |> go()
  end

  @doc """
  Removes users as members of a group.

  ## Parameters

    - request: [MemberDeleteRequest] [The member request that contains all of the information used to remove members to the group.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_group_members(request :: MemberDeleteRequest) :: FusionAuth.ClientResponse()
  def delete_group_members(request) do
    start
    |> uri("/api/group/member")
    |> body_handler(Utilities.new_body_handler(request))
    |> delete()
    |> go()
  end

  @doc """
  Deletes the identity provider for the given Id.

  ## Parameters

    - identity_provider_id: [String.t()] [The Id of the identity provider to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_identity_provider(identity_provider_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_identity_provider(identity_provider_id) do
    start
    |> uri("/api/identity-provider")
    |> url_segment(identity_provider_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the key for the given Id.

  ## Parameters

    - key_id: [String.t()] [The Id of the key to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_key(key_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_key(key_id) do
    start
    |> uri("/api/key")
    |> url_segment(key_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the lambda for the given Id.

  ## Parameters

    - lambda_id: [String.t()] [The Id of the lambda to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_lambda(lambda_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_lambda(lambda_id) do
    start
    |> uri("/api/lambda")
    |> url_segment(lambda_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the user registration for the given user and application.

  ## Parameters

    - user_id: [String.t()] [The Id of the user whose registration is being deleted.]
  ## Parameters

    - application_id: [String.t()] [The Id of the application to remove the registration for.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_registration(user_id :: String.t(), application_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_registration(user_id, application_id) do
    start
    |> uri("/api/user/registration")
    |> url_segment(user_id)
    |> url_segment(application_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the tenant for the given Id.

  ## Parameters

    - tenant_id: [String.t()] [The Id of the tenant to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_tenant(tenant_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_tenant(tenant_id) do
    start
    |> uri("/api/tenant")
    |> url_segment(tenant_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the theme for the given Id.

  ## Parameters

    - theme_id: [String.t()] [The Id of the theme to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_theme(theme_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_theme(theme_id) do
    start
    |> uri("/api/theme")
    |> url_segment(theme_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
  with the user.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to delete.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_user(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_user(user_id) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> url_parameter("hardDelete", true)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
  the action being applied to any users.

  ## Parameters

    - user_action_id: [String.t()] [The Id of the user action to delete.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_user_action(user_action_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_user_action(user_action_id) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> url_parameter("hardDelete", true)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the user action reason for the given Id.

  ## Parameters

    - user_action_reason_id: [String.t()] [The Id of the user action reason to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_user_action_reason(user_action_reason_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_user_action_reason(user_action_reason_id) do
    start
    |> uri("/api/user-action-reason")
    |> url_segment(user_action_reason_id)
    |> delete()
    |> go()
  end

  @doc """
  Deletes the users with the given ids, or users matching the provided JSON query or queryString.
  The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.

  This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
  Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.

  ## Parameters

    - request: [UserDeleteRequest] [The UserDeleteRequest.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.

  @deprecated This method has been renamed to delete_users_by_query, use that method instead.
  """
  @spec delete_users(request :: UserDeleteRequest) :: FusionAuth.ClientResponse()
  def delete_users(request) do
    start
    |> uri("/api/user/bulk")
    |> body_handler(Utilities.new_body_handler(request))
    |> delete()
    |> go()
  end

  @doc """
  Deletes the users with the given ids, or users matching the provided JSON query or queryString.
  The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.

  This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
  Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.

  ## Parameters

    - request: [UserDeleteRequest] [The UserDeleteRequest.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_users_by_query(request :: UserDeleteRequest) :: FusionAuth.ClientResponse()
  def delete_users_by_query(request) do
    start
    |> uri("/api/user/bulk")
    |> body_handler(Utilities.new_body_handler(request))
    |> delete()
    |> go()
  end

  @doc """
  Deletes the webhook for the given Id.

  ## Parameters

    - webhook_id: [String.t()] [The Id of the webhook to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec delete_webhook(webhook_id :: String.t()) :: FusionAuth.ClientResponse()
  def delete_webhook(webhook_id) do
    start
    |> uri("/api/webhook")
    |> url_segment(webhook_id)
    |> delete()
    |> go()
  end

  @doc """
  Disable Two Factor authentication for a user.

  ## Parameters

    - user_id: [String.t()] [The Id of the User for which you're disabling Two Factor authentication.]
  ## Parameters

    - code: [String.t()] [The Two Factor code used verify the the caller knows the Two Factor secret.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec disable_two_factor(user_id :: String.t(), code :: String.t()) :: FusionAuth.ClientResponse()
  def disable_two_factor(user_id, code) do
    start
    |> uri("/api/user/two-factor")
    |> url_parameter("userId", user_id)
    |> url_parameter("code", code)
    |> delete()
    |> go()
  end

  @doc """
  Enable Two Factor authentication for a user.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to enable Two Factor authentication.]
  ## Parameters

    - request: [TwoFactorRequest] [The two factor enable request information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec enable_two_factor(user_id :: String.t(), request :: TwoFactorRequest) :: FusionAuth.ClientResponse()
  def enable_two_factor(user_id, request) do
    start
    |> uri("/api/user/two-factor")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Exchanges an OAuth authorization code for an access token.
  Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint for an access token.

  ## Parameters

    - code: [String.t()] [The authorization code returned on the /oauth2/authorize response.]
  ## Parameters

    - client_id: [String.t()] [The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate.]
  ## Parameters

    - client_secret: [String.t()] [(Optional) The client secret. This value will be required if client authentication is enabled.]
  ## Parameters

  ## Parameters

    - redirect_uri: [String.t()] [The URI to redirect to upon a successful request.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec exchange_o_auth_code_for_access_token(code :: String.t(), client_id :: String.t(), client_secret :: String.t() || nil, redirect_uri :: String.t()) :: FusionAuth.ClientResponse()
  def exchange_o_auth_code_for_access_token(code, client_id, client_secret, redirect_uri) do
    body = {
      "code" => code,
      "client_id" => client_id,
      "client_secret" => client_secret,
      "grant_type" => "authorization_code",
      "redirect_uri" => redirect_uri
    }
    startAnonymous
    |> uri("/oauth2/token")
    |> body_handler(Utilities.new_body_handler(body))
    |> post()
    |> go()
  end

  @doc """
  Exchanges an OAuth authorization code and code_verifier for an access token.
  Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint and a code_verifier for an access token.

  ## Parameters

    - code: [String.t()] [The authorization code returned on the /oauth2/authorize response.]
  ## Parameters

    - client_id: [String.t()] [(Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.]
  ## Parameters

    - client_secret: [String.t()] [(Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.]
  ## Parameters

  ## Parameters

    - redirect_uri: [String.t()] [The URI to redirect to upon a successful request.]
  ## Parameters

    - code_verifier: [String.t()] [The random string generated previously. Will be compared with the code_challenge sent previously, which allows the OAuth provider to authenticate your app.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec exchange_o_auth_code_for_access_token_using_pkce(code :: String.t(), client_id :: String.t() || nil, client_secret :: String.t() || nil, redirect_uri :: String.t(), code_verifier :: String.t()) :: FusionAuth.ClientResponse()
  def exchange_o_auth_code_for_access_token_using_pkce(code, client_id, client_secret, redirect_uri, code_verifier) do
    body = {
      "code" => code,
      "client_id" => client_id,
      "client_secret" => client_secret,
      "grant_type" => "authorization_code",
      "redirect_uri" => redirect_uri,
      "code_verifier" => code_verifier
    }
    startAnonymous
    |> uri("/oauth2/token")
    |> body_handler(Utilities.new_body_handler(body))
    |> post()
    |> go()
  end

  @doc """
  Exchange a Refresh Token for an Access Token.
  If you will be using the Refresh Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for an access token.

  ## Parameters

    - refresh_token: [String.t()] [The refresh token that you would like to use to exchange for an access token.]
  ## Parameters

    - client_id: [String.t()] [(Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.]
  ## Parameters

    - client_secret: [String.t()] [(Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.]
  ## Parameters

  ## Parameters

    - scope: [String.t()] [(Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.]
  ## Parameters

    - user_code: [String.t()] [(Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec exchange_refresh_token_for_access_token(refresh_token :: String.t(), client_id :: String.t() || nil, client_secret :: String.t() || nil, scope :: String.t() || nil, user_code :: String.t() || nil) :: FusionAuth.ClientResponse()
  def exchange_refresh_token_for_access_token(refresh_token, client_id, client_secret, scope, user_code) do
    body = {
      "refresh_token" => refresh_token,
      "client_id" => client_id,
      "client_secret" => client_secret,
      "grant_type" => "refresh_token",
      "scope" => scope,
      "user_code" => user_code
    }
    startAnonymous
    |> uri("/oauth2/token")
    |> body_handler(Utilities.new_body_handler(body))
    |> post()
    |> go()
  end

  @doc """
  Exchange a refresh token for a new JWT.

  ## Parameters

    - request: [RefreshRequest] [The refresh request.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec exchange_refresh_token_for_jwt(request :: RefreshRequest) :: FusionAuth.ClientResponse()
  def exchange_refresh_token_for_jwt(request) do
    startAnonymous
    |> uri("/api/jwt/refresh")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Exchange User Credentials for a Token.
  If you will be using the Resource Owner Password Credential Grant, you will make a request to the Token endpoint to exchange the user’s email and password for an access token.

  ## Parameters

    - username: [String.t()] [The login identifier of the user. The login identifier can be either the email or the username.]
  ## Parameters

    - password: [String.t()] [The user’s password.]
  ## Parameters

    - client_id: [String.t()] [(Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.]
  ## Parameters

    - client_secret: [String.t()] [(Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.]
  ## Parameters

  ## Parameters

    - scope: [String.t()] [(Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.]
  ## Parameters

    - user_code: [String.t()] [(Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec exchange_user_credentials_for_access_token(username :: String.t(), password :: String.t(), client_id :: String.t() || nil, client_secret :: String.t() || nil, scope :: String.t() || nil, user_code :: String.t() || nil) :: FusionAuth.ClientResponse()
  def exchange_user_credentials_for_access_token(username, password, client_id, client_secret, scope, user_code) do
    body = {
      "username" => username,
      "password" => password,
      "client_id" => client_id,
      "client_secret" => client_secret,
      "grant_type" => "password",
      "scope" => scope,
      "user_code" => user_code
    }
    startAnonymous
    |> uri("/oauth2/token")
    |> body_handler(Utilities.new_body_handler(body))
    |> post()
    |> go()
  end

  @doc """
  Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.

  ## Parameters

    - request: [ForgotPasswordRequest] [The request that contains the information about the user so that they can be emailed.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec forgot_password(request :: ForgotPasswordRequest) :: FusionAuth.ClientResponse()
  def forgot_password(request) do
    start
    |> uri("/api/user/forgot-password")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
  email to the User. This API may be used to collect the verificationId for use with a third party system.

  ## Parameters

    - email: [String.t()] [The email address of the user that needs a new verification email.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec generate_email_verification_id(email :: String.t()) :: FusionAuth.ClientResponse()
  def generate_email_verification_id(email) do
    start
    |> uri("/api/user/verify-email")
    |> url_parameter("email", email)
    |> url_parameter("sendVerifyEmail", false)
    |> put()
    |> go()
  end

  @doc """
  Generate a new RSA or EC key pair or an HMAC secret.

  ## Parameters

    - key_id: [String.t()] [(Optional) The Id for the key. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [KeyRequest] [The request object that contains all of the information used to create the key.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec generate_key(key_id :: String.t() || nil, request :: KeyRequest) :: FusionAuth.ClientResponse()
  def generate_key(key_id, request) do
    start
    |> uri("/api/key/generate")
    |> url_segment(key_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
  email to the User. This API may be used to collect the verificationId for use with a third party system.

  ## Parameters

    - email: [String.t()] [The email address of the user that needs a new verification email.]
  ## Parameters

  ## Parameters

    - application_id: [String.t()] [The Id of the application to be verified.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec generate_registration_verification_id(email :: String.t(), application_id :: String.t()) :: FusionAuth.ClientResponse()
  def generate_registration_verification_id(email, application_id) do
    start
    |> uri("/api/user/verify-registration")
    |> url_parameter("email", email)
    |> url_parameter("sendVerifyPasswordEmail", false)
    |> url_parameter("applicationId", application_id)
    |> put()
    |> go()
  end

  @doc """
  Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
  both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
  application such as Google Authenticator.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec generate_two_factor_secret() :: FusionAuth.ClientResponse()
  def generate_two_factor_secret() do
    start
    |> uri("/api/two-factor/secret")
    |> get()
    |> go()
  end

  @doc """
  Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
  both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
  application such as Google Authenticator.

  ## Parameters

    - encoded_jwt: [String.t()] [The encoded JWT (access token).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec generate_two_factor_secret_using_jwt(encoded_jwt :: String.t()) :: FusionAuth.ClientResponse()
  def generate_two_factor_secret_using_jwt(encoded_jwt) do
    startAnonymous
    |> uri("/api/two-factor/secret")
    |> authorization("Bearer " + encoded_jwt)
    |> get()
    |> go()
  end

  @doc """
  Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
  login systems.

  ## Parameters

    - request: [IdentityProviderLoginRequest] [The third-party login request that contains information from the third-party login, providers that FusionAuth uses to reconcile the user's account.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec identity_provider_login(request :: IdentityProviderLoginRequest) :: FusionAuth.ClientResponse()
  def identity_provider_login(request) do
    startAnonymous
    |> uri("/api/identity-provider/login")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Import an existing RSA or EC key pair or an HMAC secret.

  ## Parameters

    - key_id: [String.t()] [(Optional) The Id for the key. If not provided a secure random UUID will be generated.]
  ## Parameters

    - request: [KeyRequest] [The request object that contains all of the information used to create the key.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec import_key(key_id :: String.t() || nil, request :: KeyRequest) :: FusionAuth.ClientResponse()
  def import_key(key_id, request) do
    start
    |> uri("/api/key/import")
    |> url_segment(key_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Bulk imports refresh tokens. This request performs minimal validation and runs batch inserts of refresh tokens with the
  expectation that each token represents a user that already exists and is registered for the corresponding FusionAuth
  Application. This is done to increases the insert performance.

  Therefore, if you encounter an error due to a database key violation, the response will likely offer a generic
  explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
  body with specific validation errors. This will slow the request down but will allow you to identify the cause of
  the failure. See the validateDbConstraints request parameter.

  ## Parameters

    - request: [RefreshTokenImportRequest] [The request that contains all of the information about all of the refresh tokens to import.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec import_refresh_tokens(request :: RefreshTokenImportRequest) :: FusionAuth.ClientResponse()
  def import_refresh_tokens(request) do
    start
    |> uri("/api/user/refresh-token/import")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Bulk imports users. This request performs minimal validation and runs batch inserts of users with the expectation
  that each user does not yet exist and each registration corresponds to an existing FusionAuth Application. This is done to
  increases the insert performance.

  Therefore, if you encounter an error due to a database key violation, the response will likely offer
  a generic explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
  body with specific validation errors. This will slow the request down but will allow you to identify the cause of the failure. See
  the validateDbConstraints request parameter.

  ## Parameters

    - request: [ImportRequest] [The request that contains all of the information about all of the users to import.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec import_users(request :: ImportRequest) :: FusionAuth.ClientResponse()
  def import_users(request) do
    start
    |> uri("/api/user/import")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Inspect an access token issued by FusionAuth.

  ## Parameters

    - client_id: [String.t()] [The unique client identifier. The client Id is the Id of the FusionAuth Application for which this token was generated.]
  ## Parameters

    - token: [String.t()] [The access token returned by this OAuth provider as the result of a successful authentication.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec introspect_access_token(client_id :: String.t(), token :: String.t()) :: FusionAuth.ClientResponse()
  def introspect_access_token(client_id, token) do
    body = {
      "client_id" => client_id,
      "token" => token
    }
    startAnonymous
    |> uri("/oauth2/introspect")
    |> body_handler(Utilities.new_body_handler(body))
    |> post()
    |> go()
  end

  @doc """
  Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
  access token is properly signed and not expired.
  <p>
  This API may be used in an SSO configuration to issue new tokens for another application after the user has
  obtained a valid token from authentication.

  ## Parameters

    - application_id: [String.t()] [The Application Id for which you are requesting a new access token be issued.]
  ## Parameters

    - encoded_jwt: [String.t()] [The encoded JWT (access token).]
  ## Parameters

    - refresh_token: [String.t()] [(Optional) An existing refresh token used to request a refresh token in addition to a JWT in the response., <p>The target application represented by the applicationId request parameter must have refresh, tokens enabled in order to receive a refresh token in the response.</p>]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec issue_jwt(application_id :: String.t(), encoded_jwt :: String.t(), refresh_token :: String.t() || nil) :: FusionAuth.ClientResponse()
  def issue_jwt(application_id, encoded_jwt, refresh_token) do
    startAnonymous
    |> uri("/api/jwt/issue")
    |> authorization("Bearer " + encoded_jwt)
    |> url_parameter("applicationId", application_id)
    |> url_parameter("refreshToken", refresh_token)
    |> get()
    |> go()
  end

  @doc """
  Authenticates a user to FusionAuth.

  This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.

  ## Parameters

    - request: [LoginRequest] [The login request that contains the user credentials used to log them in.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec login(request :: LoginRequest) :: FusionAuth.ClientResponse()
  def login(request) do
    start
    |> uri("/api/login")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
  FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
  application where they no longer have a session. This helps correctly track login counts, times and helps with
  reporting.

  ## Parameters

    - user_id: [String.t()] [The Id of the user that was logged in.]
  ## Parameters

    - application_id: [String.t()] [The Id of the application that they logged into.]
  ## Parameters

    - caller_ip_address: [String.t()] [(Optional) The IP address of the end-user that is logging in. If a null value is provided, the IP address will be that of the client or last proxy that sent the request.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec login_ping(user_id :: String.t(), application_id :: String.t(), caller_ip_address :: String.t() || nil) :: FusionAuth.ClientResponse()
  def login_ping(user_id, application_id, caller_ip_address) do
    start
    |> uri("/api/login")
    |> url_segment(user_id)
    |> url_segment(application_id)
    |> url_parameter("ipAddress", caller_ip_address)
    |> put()
    |> go()
  end

  @doc """
  The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
  client and revoke the refresh token stored. This API does nothing if the request does not contain an access
  token or refresh token cookies.

  ## Parameters

    - global: [boolean()] [When this value is set to true all of the refresh tokens issued to the owner of the, provided token will be revoked.]
  ## Parameters

    - refresh_token: [String.t()] [(Optional) The refresh_token as a request parameter instead of coming in via a cookie., If provided this takes precedence over the cookie.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec logout(global :: boolean(), refresh_token :: String.t() || nil) :: FusionAuth.ClientResponse()
  def logout(global, refresh_token) do
    startAnonymous
    |> uri("/api/logout")
    |> url_parameter("global", global)
    |> url_parameter("refreshToken", refresh_token)
    |> post()
    |> go()
  end

  @doc """
  Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
  by a registered identity provider. A 404 indicates the domain is not managed.

  ## Parameters

    - domain: [String.t()] [The domain or email address to lookup.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec lookup_identity_provider(domain :: String.t()) :: FusionAuth.ClientResponse()
  def lookup_identity_provider(domain) do
    start
    |> uri("/api/identity-provider/lookup")
    |> url_parameter("domain", domain)
    |> get()
    |> go()
  end

  @doc """
  Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
  action.

  ## Parameters

    - action_id: [String.t()] [The Id of the action to modify. This is technically the user action log id.]
  ## Parameters

    - request: [ActionRequest] [The request that contains all of the information about the modification.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec modify_action(action_id :: String.t(), request :: ActionRequest) :: FusionAuth.ClientResponse()
  def modify_action(action_id, request) do
    start
    |> uri("/api/user/action")
    |> url_segment(action_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Complete a login request using a passwordless code

  ## Parameters

    - request: [PasswordlessLoginRequest] [The passwordless login request that contains all of the information used to complete login.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec passwordless_login(request :: PasswordlessLoginRequest) :: FusionAuth.ClientResponse()
  def passwordless_login(request) do
    startAnonymous
    |> uri("/api/passwordless/login")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Updates, via PATCH, the application with the given Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to update.]
  ## Parameters

    - request: [ApplicationRequest] [The request that contains just the new application information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_application(application_id :: String.t(), request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def patch_application(application_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the application role with the given id for the application.

  ## Parameters

    - application_id: [String.t()] [The Id of the application that the role belongs to.]
  ## Parameters

  ## Parameters

    - role_id: [String.t()] [The Id of the role to update.]
  ## Parameters

    - request: [ApplicationRequest] [The request that contains just the new role information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_application_role(application_id :: String.t(), role_id :: String.t(), request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def patch_application_role(application_id, role_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_segment("role")
    |> url_segment(role_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the connector with the given Id.

  ## Parameters

    - connector_id: [String.t()] [The Id of the connector to update.]
  ## Parameters

    - request: [ConnectorRequest] [The request that contains just the new connector information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_connector(connector_id :: String.t(), request :: ConnectorRequest) :: FusionAuth.ClientResponse()
  def patch_connector(connector_id, request) do
    start
    |> uri("/api/connector")
    |> url_segment(connector_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the consent with the given Id.

  ## Parameters

    - consent_id: [String.t()] [The Id of the consent to update.]
  ## Parameters

    - request: [ConsentRequest] [The request that contains just the new consent information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_consent(consent_id :: String.t(), request :: ConsentRequest) :: FusionAuth.ClientResponse()
  def patch_consent(consent_id, request) do
    start
    |> uri("/api/consent")
    |> url_segment(consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the email template with the given Id.

  ## Parameters

    - email_template_id: [String.t()] [The Id of the email template to update.]
  ## Parameters

    - request: [EmailTemplateRequest] [The request that contains just the new email template information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_email_template(email_template_id :: String.t(), request :: EmailTemplateRequest) :: FusionAuth.ClientResponse()
  def patch_email_template(email_template_id, request) do
    start
    |> uri("/api/email/template")
    |> url_segment(email_template_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the group with the given Id.

  ## Parameters

    - group_id: [String.t()] [The Id of the group to update.]
  ## Parameters

    - request: [GroupRequest] [The request that contains just the new group information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_group(group_id :: String.t(), request :: GroupRequest) :: FusionAuth.ClientResponse()
  def patch_group(group_id, request) do
    start
    |> uri("/api/group")
    |> url_segment(group_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the identity provider with the given Id.

  ## Parameters

    - identity_provider_id: [String.t()] [The Id of the identity provider to update.]
  ## Parameters

    - request: [IdentityProviderRequest] [The request object that contains just the updated identity provider information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_identity_provider(identity_provider_id :: String.t(), request :: IdentityProviderRequest) :: FusionAuth.ClientResponse()
  def patch_identity_provider(identity_provider_id, request) do
    start
    |> uri("/api/identity-provider")
    |> url_segment(identity_provider_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the available integrations.

  ## Parameters

    - request: [IntegrationRequest] [The request that contains just the new integration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_integrations(request :: IntegrationRequest) :: FusionAuth.ClientResponse()
  def patch_integrations(request) do
    start
    |> uri("/api/integration")
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the lambda with the given Id.

  ## Parameters

    - lambda_id: [String.t()] [The Id of the lambda to update.]
  ## Parameters

    - request: [LambdaRequest] [The request that contains just the new lambda information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_lambda(lambda_id :: String.t(), request :: LambdaRequest) :: FusionAuth.ClientResponse()
  def patch_lambda(lambda_id, request) do
    start
    |> uri("/api/lambda")
    |> url_segment(lambda_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the registration for the user with the given id and the application defined in the request.

  ## Parameters

    - user_id: [String.t()] [The Id of the user whose registration is going to be updated.]
  ## Parameters

    - request: [RegistrationRequest] [The request that contains just the new registration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_registration(user_id :: String.t(), request :: RegistrationRequest) :: FusionAuth.ClientResponse()
  def patch_registration(user_id, request) do
    start
    |> uri("/api/user/registration")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the system configuration.

  ## Parameters

    - request: [SystemConfigurationRequest] [The request that contains just the new system configuration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_system_configuration(request :: SystemConfigurationRequest) :: FusionAuth.ClientResponse()
  def patch_system_configuration(request) do
    start
    |> uri("/api/system-configuration")
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the tenant with the given Id.

  ## Parameters

    - tenant_id: [String.t()] [The Id of the tenant to update.]
  ## Parameters

    - request: [TenantRequest] [The request that contains just the new tenant information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_tenant(tenant_id :: String.t(), request :: TenantRequest) :: FusionAuth.ClientResponse()
  def patch_tenant(tenant_id, request) do
    start
    |> uri("/api/tenant")
    |> url_segment(tenant_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the theme with the given Id.

  ## Parameters

    - theme_id: [String.t()] [The Id of the theme to update.]
  ## Parameters

    - request: [ThemeRequest] [The request that contains just the new theme information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_theme(theme_id :: String.t(), request :: ThemeRequest) :: FusionAuth.ClientResponse()
  def patch_theme(theme_id, request) do
    start
    |> uri("/api/theme")
    |> url_segment(theme_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to update.]
  ## Parameters

    - request: [UserRequest] [The request that contains just the new user information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_user(user_id :: String.t(), request :: UserRequest) :: FusionAuth.ClientResponse()
  def patch_user(user_id, request) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the user action with the given Id.

  ## Parameters

    - user_action_id: [String.t()] [The Id of the user action to update.]
  ## Parameters

    - request: [UserActionRequest] [The request that contains just the new user action information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_user_action(user_action_id :: String.t(), request :: UserActionRequest) :: FusionAuth.ClientResponse()
  def patch_user_action(user_action_id, request) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, the user action reason with the given Id.

  ## Parameters

    - user_action_reason_id: [String.t()] [The Id of the user action reason to update.]
  ## Parameters

    - request: [UserActionReasonRequest] [The request that contains just the new user action reason information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_user_action_reason(user_action_reason_id :: String.t(), request :: UserActionReasonRequest) :: FusionAuth.ClientResponse()
  def patch_user_action_reason(user_action_reason_id, request) do
    start
    |> uri("/api/user-action-reason")
    |> url_segment(user_action_reason_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Updates, via PATCH, a single User consent by Id.

  ## Parameters

    - user_consent_id: [String.t()] [The User Consent Id]
  ## Parameters

    - request: [UserConsentRequest] [The request that contains just the new user consent information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec patch_user_consent(user_consent_id :: String.t(), request :: UserConsentRequest) :: FusionAuth.ClientResponse()
  def patch_user_consent(user_consent_id, request) do
    start
    |> uri("/api/user/consent")
    |> url_segment(user_consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> patch()
    |> go()
  end

  @doc """
  Reactivates the application with the given Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to reactivate.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec reactivate_application(application_id :: String.t()) :: FusionAuth.ClientResponse()
  def reactivate_application(application_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_parameter("reactivate", true)
    |> put()
    |> go()
  end

  @doc """
  Reactivates the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to reactivate.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec reactivate_user(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def reactivate_user(user_id) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> url_parameter("reactivate", true)
    |> put()
    |> go()
  end

  @doc """
  Reactivates the user action with the given Id.

  ## Parameters

    - user_action_id: [String.t()] [The Id of the user action to reactivate.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec reactivate_user_action(user_action_id :: String.t()) :: FusionAuth.ClientResponse()
  def reactivate_user_action(user_action_id) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> url_parameter("reactivate", true)
    |> put()
    |> go()
  end

  @doc """
  Reconcile a User to FusionAuth using JWT issued from another Identity Provider.

  ## Parameters

    - request: [IdentityProviderLoginRequest] [The reconcile request that contains the data to reconcile the User.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec reconcile_jwt(request :: IdentityProviderLoginRequest) :: FusionAuth.ClientResponse()
  def reconcile_jwt(request) do
    startAnonymous
    |> uri("/api/jwt/reconcile")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
  reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be
  if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
   ensure the index immediately current before making a query request to the search index.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec refresh_user_search_index() :: FusionAuth.ClientResponse()
  def refresh_user_search_index() do
    start
    |> uri("/api/user/search")
    |> put()
    |> go()
  end

  @doc """
  Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
  will create the user as well as register them for the application. This is called a Full Registration. However, if
  you only provide the UserRegistration object, then the user must already exist and they will be registered for the
  application. The user id can also be provided and it will either be used to look up an existing user or it will be
  used for the newly created User.

  ## Parameters

    - user_id: [String.t()] [(Optional) The Id of the user being registered for the application and optionally created.]
  ## Parameters

    - request: [RegistrationRequest] [The request that optionally contains the User and must contain the UserRegistration.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec register(user_id :: String.t() || nil, request :: RegistrationRequest) :: FusionAuth.ClientResponse()
  def register(user_id, request) do
    start
    |> uri("/api/user/registration")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Removes a user from the family with the given id.

  ## Parameters

    - family_id: [String.t()] [The id of the family to remove the user from.]
  ## Parameters

    - user_id: [String.t()] [The id of the user to remove from the family.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec remove_user_from_family(family_id :: String.t(), user_id :: String.t()) :: FusionAuth.ClientResponse()
  def remove_user_from_family(family_id, user_id) do
    start
    |> uri("/api/user/family")
    |> url_segment(family_id)
    |> url_segment(user_id)
    |> delete()
    |> go()
  end

  @doc """
  Re-sends the verification email to the user.

  ## Parameters

    - email: [String.t()] [The email address of the user that needs a new verification email.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec resend_email_verification(email :: String.t()) :: FusionAuth.ClientResponse()
  def resend_email_verification(email) do
    start
    |> uri("/api/user/verify-email")
    |> url_parameter("email", email)
    |> put()
    |> go()
  end

  @doc """
  Re-sends the verification email to the user. If the Application has configured a specific email template this will be used
  instead of the tenant configuration.

  ## Parameters

    - application_id: [String.t()] [The unique Application Id to used to resolve an application specific email template.]
  ## Parameters

    - email: [String.t()] [The email address of the user that needs a new verification email.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec resend_email_verification_with_application_template(application_id :: String.t(), email :: String.t()) :: FusionAuth.ClientResponse()
  def resend_email_verification_with_application_template(application_id, email) do
    start
    |> uri("/api/user/verify-email")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("email", email)
    |> put()
    |> go()
  end

  @doc """
  Re-sends the application registration verification email to the user.

  ## Parameters

    - email: [String.t()] [The email address of the user that needs a new verification email.]
  ## Parameters

    - application_id: [String.t()] [The Id of the application to be verified.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec resend_registration_verification(email :: String.t(), application_id :: String.t()) :: FusionAuth.ClientResponse()
  def resend_registration_verification(email, application_id) do
    start
    |> uri("/api/user/verify-registration")
    |> url_parameter("email", email)
    |> url_parameter("applicationId", application_id)
    |> put()
    |> go()
  end

  @doc """
  Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.

  ## Parameters

    - action_id: [String.t()] [The Id of the action to retrieve.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_action(action_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_action(action_id) do
    start
    |> uri("/api/user/action")
    |> url_segment(action_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
  and inactive as well as non-time based actions.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to fetch the actions for.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_actions(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_actions(user_id) do
    start
    |> uri("/api/user/action")
    |> url_parameter("userId", user_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to fetch the actions for.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_actions_preventing_login(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_actions_preventing_login(user_id) do
    start
    |> uri("/api/user/action")
    |> url_parameter("userId", user_id)
    |> url_parameter("preventingLogin", true)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the actions for the user with the given Id that are currently active.
  An active action means one that is time based and has not been canceled, and has not ended.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to fetch the actions for.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_active_actions(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_active_actions(user_id) do
    start
    |> uri("/api/user/action")
    |> url_parameter("userId", user_id)
    |> url_parameter("active", true)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the application for the given id or all of the applications if the id is null.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_application(application_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_application(application_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the applications.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_applications() :: FusionAuth.ClientResponse()
  def retrieve_applications() do
    start
    |> uri("/api/application")
    |> get()
    |> go()
  end

  @doc """
  Retrieves a single audit log for the given Id.

  ## Parameters

    - audit_log_id: [integer()] [The Id of the audit log to retrieve.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_audit_log(audit_log_id :: integer()) :: FusionAuth.ClientResponse()
  def retrieve_audit_log(audit_log_id) do
    start
    |> uri("/api/system/audit-log")
    |> url_segment(audit_log_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the connector with the given Id.

  ## Parameters

    - connector_id: [String.t()] [The Id of the connector.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_connector(connector_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_connector(connector_id) do
    start
    |> uri("/api/connector")
    |> url_segment(connector_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the connectors.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_connectors() :: FusionAuth.ClientResponse()
  def retrieve_connectors() do
    start
    |> uri("/api/connector")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the Consent for the given Id.

  ## Parameters

    - consent_id: [String.t()] [The Id of the consent.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_consent(consent_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_consent(consent_id) do
    start
    |> uri("/api/consent")
    |> url_segment(consent_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the consent.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_consents() :: FusionAuth.ClientResponse()
  def retrieve_consents() do
    start
    |> uri("/api/consent")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the daily active user report between the two instants. If you specify an application id, it will only
  return the daily active counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_daily_active_report(application_id :: String.t() || nil, start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_daily_active_report(application_id, start, end) do
    start
    |> uri("/api/report/daily-active-user")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.

  ## Parameters

    - email_template_id: [String.t()] [(Optional) The Id of the email template.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_email_template(email_template_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_email_template(email_template_id) do
    start
    |> uri("/api/email/template")
    |> url_segment(email_template_id)
    |> get()
    |> go()
  end

  @doc """
  Creates a preview of the email template provided in the request. This allows you to preview an email template that
  hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
  will create the preview based on whatever is given.

  ## Parameters

    - request: [PreviewRequest] [The request that contains the email template and optionally a locale to render it in.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_email_template_preview(request :: PreviewRequest) :: FusionAuth.ClientResponse()
  def retrieve_email_template_preview(request) do
    start
    |> uri("/api/email/template/preview")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Retrieves all of the email templates.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_email_templates() :: FusionAuth.ClientResponse()
  def retrieve_email_templates() do
    start
    |> uri("/api/email/template")
    |> get()
    |> go()
  end

  @doc """
  Retrieves a single event log for the given Id.

  ## Parameters

    - event_log_id: [integer()] [The Id of the event log to retrieve.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_event_log(event_log_id :: integer()) :: FusionAuth.ClientResponse()
  def retrieve_event_log(event_log_id) do
    start
    |> uri("/api/system/event-log")
    |> url_segment(event_log_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the families that a user belongs to.

  ## Parameters

    - user_id: [String.t()] [The User's id]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_families(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_families(user_id) do
    start
    |> uri("/api/user/family")
    |> url_parameter("userId", user_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the members of a family by the unique Family Id.

  ## Parameters

    - family_id: [String.t()] [The unique Id of the Family.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_family_members_by_family_id(family_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_family_members_by_family_id(family_id) do
    start
    |> uri("/api/user/family")
    |> url_segment(family_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the form with the given Id.

  ## Parameters

    - form_id: [String.t()] [The Id of the form.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_form(form_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_form(form_id) do
    start
    |> uri("/api/form")
    |> url_segment(form_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the form field with the given Id.

  ## Parameters

    - field_id: [String.t()] [The Id of the form field.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_form_field(field_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_form_field(field_id) do
    start
    |> uri("/api/form/field")
    |> url_segment(field_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the forms fields


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_form_fields() :: FusionAuth.ClientResponse()
  def retrieve_form_fields() do
    start
    |> uri("/api/form/field")
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the forms.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_forms() :: FusionAuth.ClientResponse()
  def retrieve_forms() do
    start
    |> uri("/api/form")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the group for the given Id.

  ## Parameters

    - group_id: [String.t()] [The Id of the group.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_group(group_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_group(group_id) do
    start
    |> uri("/api/group")
    |> url_segment(group_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the groups.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_groups() :: FusionAuth.ClientResponse()
  def retrieve_groups() do
    start
    |> uri("/api/group")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the identity provider for the given id or all of the identity providers if the id is null.

  ## Parameters

    - identity_provider_id: [String.t()] [(Optional) The identity provider id.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_identity_provider(identity_provider_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_identity_provider(identity_provider_id) do
    start
    |> uri("/api/identity-provider")
    |> url_segment(identity_provider_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the identity providers.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_identity_providers() :: FusionAuth.ClientResponse()
  def retrieve_identity_providers() do
    start
    |> uri("/api/identity-provider")
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the actions for the user with the given Id that are currently inactive.
  An inactive action means one that is time based and has been canceled or has expired, or is not time based.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to fetch the actions for.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_inactive_actions(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_inactive_actions(user_id) do
    start
    |> uri("/api/user/action")
    |> url_parameter("userId", user_id)
    |> url_parameter("active", false)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the applications that are currently inactive.

  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_inactive_applications() :: FusionAuth.ClientResponse()
  def retrieve_inactive_applications() do
    start
    |> uri("/api/application")
    |> url_parameter("inactive", true)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the user actions that are currently inactive.

  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_inactive_user_actions() :: FusionAuth.ClientResponse()
  def retrieve_inactive_user_actions() do
    start
    |> uri("/api/user-action")
    |> url_parameter("inactive", true)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the available integrations.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_integration() :: FusionAuth.ClientResponse()
  def retrieve_integration() do
    start
    |> uri("/api/integration")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).

  ## Parameters

    - key_id: [String.t()] [The Id of the public key (kid).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_jwt_public_key(key_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_jwt_public_key(key_id) do
    startAnonymous
    |> uri("/api/jwt/public-key")
    |> url_parameter("kid", key_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the Application for which this key is used.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_jwt_public_key_by_application_id(application_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_jwt_public_key_by_application_id(application_id) do
    startAnonymous
    |> uri("/api/jwt/public-key")
    |> url_parameter("applicationId", application_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_jwt_public_keys() :: FusionAuth.ClientResponse()
  def retrieve_jwt_public_keys() do
    startAnonymous
    |> uri("/api/jwt/public-key")
    |> get()
    |> go()
  end

  @doc """
  Returns public keys used by FusionAuth to cryptographically verify JWTs using the JSON Web Key format.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_json_web_key_set() :: FusionAuth.ClientResponse()
  def retrieve_json_web_key_set() do
    startAnonymous
    |> uri("/.well-known/jwks.json")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the key for the given Id.

  ## Parameters

    - key_id: [String.t()] [The Id of the key.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_key(key_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_key(key_id) do
    start
    |> uri("/api/key")
    |> url_segment(key_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the keys.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_keys() :: FusionAuth.ClientResponse()
  def retrieve_keys() do
    start
    |> uri("/api/key")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the lambda for the given Id.

  ## Parameters

    - lambda_id: [String.t()] [The Id of the lambda.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_lambda(lambda_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_lambda(lambda_id) do
    start
    |> uri("/api/lambda")
    |> url_segment(lambda_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the lambdas.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_lambdas() :: FusionAuth.ClientResponse()
  def retrieve_lambdas() do
    start
    |> uri("/api/lambda")
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the lambdas for the provided type.

  ## Parameters

    - type: [LambdaType] [The type of the lambda to return.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_lambdas_by_type(type :: LambdaType) :: FusionAuth.ClientResponse()
  def retrieve_lambdas_by_type(type) do
    start
    |> uri("/api/lambda")
    |> url_parameter("type", type)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the login report between the two instants. If you specify an application id, it will only return the
  login counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_login_report(application_id :: String.t() || nil, start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_login_report(application_id, start, end) do
    start
    |> uri("/api/report/login")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
  return the monthly active counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_monthly_active_report(application_id :: String.t() || nil, start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_monthly_active_report(application_id, start, end) do
    start
    |> uri("/api/report/monthly-active-user")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the Oauth2 configuration for the application for the given Application Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the Application to retrieve OAuth configuration.]
  ## Parameters


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_oauth_configuration(application_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_oauth_configuration(application_id) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_segment("oauth-configuration")
    |> get()
    |> go()
  end

  @doc """
  Returns the well known OpenID Configuration JSON document


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_open_id_configuration() :: FusionAuth.ClientResponse()
  def retrieve_open_id_configuration() do
    startAnonymous
    |> uri("/.well-known/openid-configuration")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided
  through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.

  This API does not require an API key.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_password_validation_rules() :: FusionAuth.ClientResponse()
  def retrieve_password_validation_rules() do
    startAnonymous
    |> uri("/api/tenant/password-validation-rules")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the password validation rules for a specific tenant.

  This API does not require an API key.

  ## Parameters

    - tenant_id: [String.t()] [The Id of the tenant.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_password_validation_rules_with_tenant_id(tenant_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_password_validation_rules_with_tenant_id(tenant_id) do
    startAnonymous
    |> uri("/api/tenant/password-validation-rules")
    |> url_segment(tenant_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the children for the given parent email address.

  ## Parameters

    - parent_email: [String.t()] [The email of the parent.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_pending_children(parent_email :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_pending_children(parent_email) do
    start
    |> uri("/api/user/family/pending")
    |> url_parameter("parentEmail", parent_email)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the last number of login records.

  ## Parameters

    - offset: [integer()] [The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.]
  ## Parameters

    - limit: [integer()] [(Optional, defaults to 10) The number of records to retrieve.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_recent_logins(offset :: integer(), limit :: integer()) :: FusionAuth.ClientResponse()
  def retrieve_recent_logins(offset, limit) do
    start
    |> uri("/api/user/recent-login")
    |> url_parameter("offset", offset)
    |> url_parameter("limit", limit)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the refresh tokens that belong to the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_refresh_tokens(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_refresh_tokens(user_id) do
    start
    |> uri("/api/jwt/refresh")
    |> url_parameter("userId", user_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user registration for the user with the given id and the given application id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user.]
  ## Parameters

    - application_id: [String.t()] [The Id of the application.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_registration(user_id :: String.t(), application_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_registration(user_id, application_id) do
    start
    |> uri("/api/user/registration")
    |> url_segment(user_id)
    |> url_segment(application_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the registration report between the two instants. If you specify an application id, it will only return
  the registration counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_registration_report(application_id :: String.t() || nil, start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_registration_report(application_id, start, end) do
    start
    |> uri("/api/report/registration")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the system configuration.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_system_configuration() :: FusionAuth.ClientResponse()
  def retrieve_system_configuration() do
    start
    |> uri("/api/system-configuration")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the tenant for the given Id.

  ## Parameters

    - tenant_id: [String.t()] [The Id of the tenant.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_tenant(tenant_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_tenant(tenant_id) do
    start
    |> uri("/api/tenant")
    |> url_segment(tenant_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the tenants.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_tenants() :: FusionAuth.ClientResponse()
  def retrieve_tenants() do
    start
    |> uri("/api/tenant")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the theme for the given Id.

  ## Parameters

    - theme_id: [String.t()] [The Id of the theme.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_theme(theme_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_theme(theme_id) do
    start
    |> uri("/api/theme")
    |> url_segment(theme_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the themes.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_themes() :: FusionAuth.ClientResponse()
  def retrieve_themes() do
    start
    |> uri("/api/theme")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the totals report. This contains all of the total counts for each application and the global registration
  count.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_total_report() :: FusionAuth.ClientResponse()
  def retrieve_total_report() do
    start
    |> uri("/api/report/totals")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user for the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user(user_id) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
  actions.

  ## Parameters

    - user_action_id: [String.t()] [(Optional) The Id of the user action.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_action(user_action_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_user_action(user_action_id) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
  action reasons.

  ## Parameters

    - user_action_reason_id: [String.t()] [(Optional) The Id of the user action reason.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_action_reason(user_action_reason_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_user_action_reason(user_action_reason_id) do
    start
    |> uri("/api/user-action-reason")
    |> url_segment(user_action_reason_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all the user action reasons.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_action_reasons() :: FusionAuth.ClientResponse()
  def retrieve_user_action_reasons() do
    start
    |> uri("/api/user-action-reason")
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the user actions.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_actions() :: FusionAuth.ClientResponse()
  def retrieve_user_actions() do
    start
    |> uri("/api/user-action")
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
  password workflow has been initiated and you may not know the user's email or username.

  ## Parameters

    - change_password_id: [String.t()] [The unique change password Id that was sent via email or returned by the Forgot Password API.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_by_change_password_id(change_password_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_by_change_password_id(change_password_id) do
    start
    |> uri("/api/user")
    |> url_parameter("changePasswordId", change_password_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user for the given email.

  ## Parameters

    - email: [String.t()] [The email of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_by_email(email :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_by_email(email) do
    start
    |> uri("/api/user")
    |> url_parameter("email", email)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user for the loginId. The loginId can be either the username or the email.

  ## Parameters

    - login_id: [String.t()] [The email or username of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_by_login_id(login_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_by_login_id(login_id) do
    start
    |> uri("/api/user")
    |> url_parameter("loginId", login_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user for the given username.

  ## Parameters

    - username: [String.t()] [The username of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_by_username(username :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_by_username(username) do
    start
    |> uri("/api/user")
    |> url_parameter("username", username)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
  password workflow has been initiated and you may not know the user's email or username.

  ## Parameters

    - verification_id: [String.t()] [The unique verification Id that has been set on the user object.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_by_verification_id(verification_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_by_verification_id(verification_id) do
    start
    |> uri("/api/user")
    |> url_parameter("verificationId", verification_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the comments for the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_comments(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_comments(user_id) do
    start
    |> uri("/api/user/comment")
    |> url_segment(user_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieve a single User consent by Id.

  ## Parameters

    - user_consent_id: [String.t()] [The User consent Id]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_consent(user_consent_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_consent(user_consent_id) do
    start
    |> uri("/api/user/consent")
    |> url_segment(user_consent_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all of the consents for a User.

  ## Parameters

    - user_id: [String.t()] [The User's Id]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_consents(user_id :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_consents(user_id) do
    start
    |> uri("/api/user/consent")
    |> url_parameter("userId", user_id)
    |> get()
    |> go()
  end

  @doc """
  Call the UserInfo endpoint to retrieve User Claims from the access token issued by FusionAuth.

  ## Parameters

    - encoded_jwt: [String.t()] [The encoded JWT (access token).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_info_from_access_token(encoded_jwt :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_info_from_access_token(encoded_jwt) do
    startAnonymous
    |> uri("/oauth2/userinfo")
    |> authorization("Bearer " + encoded_jwt)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
  login counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - user_id: [String.t()] [The userId id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_login_report(application_id :: String.t() || nil, user_id :: String.t(), start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_user_login_report(application_id, user_id, start, end) do
    start
    |> uri("/api/report/login")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("userId", user_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
  login counts for that application.

  ## Parameters

    - application_id: [String.t()] [(Optional) The application id.]
  ## Parameters

    - login_id: [String.t()] [The userId id.]
  ## Parameters

    - start: [long] [The start instant as UTC milliseconds since Epoch.]
  ## Parameters

    - _end: [long] [The end instant as UTC milliseconds since Epoch.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_login_report_by_login_id(application_id :: String.t() || nil, login_id :: String.t(), start :: long, end :: long) :: FusionAuth.ClientResponse()
  def retrieve_user_login_report_by_login_id(application_id, login_id, start, end) do
    start
    |> uri("/api/report/login")
    |> url_parameter("applicationId", application_id)
    |> url_parameter("loginId", login_id)
    |> url_parameter("start", start)
    |> url_parameter("end", _end)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the last number of login records for a user.

  ## Parameters

    - user_id: [String.t()] [The Id of the user.]
  ## Parameters

    - offset: [integer()] [The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.]
  ## Parameters

    - limit: [integer()] [(Optional, defaults to 10) The number of records to retrieve.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_recent_logins(user_id :: String.t(), offset :: integer(), limit :: integer()) :: FusionAuth.ClientResponse()
  def retrieve_user_recent_logins(user_id, offset, limit) do
    start
    |> uri("/api/user/recent-login")
    |> url_parameter("userId", user_id)
    |> url_parameter("offset", offset)
    |> url_parameter("limit", limit)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.

  ## Parameters

    - encoded_jwt: [String.t()] [The encoded JWT (access token).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_user_using_jwt(encoded_jwt :: String.t()) :: FusionAuth.ClientResponse()
  def retrieve_user_using_jwt(encoded_jwt) do
    startAnonymous
    |> uri("/api/user")
    |> authorization("Bearer " + encoded_jwt)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.

  ## Parameters

    - webhook_id: [String.t()] [(Optional) The Id of the webhook.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_webhook(webhook_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def retrieve_webhook(webhook_id) do
    start
    |> uri("/api/webhook")
    |> url_segment(webhook_id)
    |> get()
    |> go()
  end

  @doc """
  Retrieves all the webhooks.


  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec retrieve_webhooks() :: FusionAuth.ClientResponse()
  def retrieve_webhooks() do
    start
    |> uri("/api/webhook")
    |> get()
    |> go()
  end

  @doc """
  Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
  and an application id, this will delete all the refresh tokens for that user for that application.

  ## Parameters

    - token: [String.t()] [(Optional) The refresh token to delete.]
  ## Parameters

    - user_id: [String.t()] [(Optional) The user id whose tokens to delete.]
  ## Parameters

    - application_id: [String.t()] [(Optional) The application id of the tokens to delete.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec revoke_refresh_token(token :: String.t() || nil, user_id :: String.t() || nil, application_id :: String.t() || nil) :: FusionAuth.ClientResponse()
  def revoke_refresh_token(token, user_id, application_id) do
    start
    |> uri("/api/jwt/refresh")
    |> url_parameter("token", token)
    |> url_parameter("userId", user_id)
    |> url_parameter("applicationId", application_id)
    |> delete()
    |> go()
  end

  @doc """
  Revokes a single User consent by Id.

  ## Parameters

    - user_consent_id: [String.t()] [The User Consent Id]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec revoke_user_consent(user_consent_id :: String.t()) :: FusionAuth.ClientResponse()
  def revoke_user_consent(user_consent_id) do
    start
    |> uri("/api/user/consent")
    |> url_segment(user_consent_id)
    |> delete()
    |> go()
  end

  @doc """
  Searches the audit logs with the specified criteria and pagination.

  ## Parameters

    - request: [AuditLogSearchRequest] [The search criteria and pagination information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec search_audit_logs(request :: AuditLogSearchRequest) :: FusionAuth.ClientResponse()
  def search_audit_logs(request) do
    start
    |> uri("/api/system/audit-log/search")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Searches the event logs with the specified criteria and pagination.

  ## Parameters

    - request: [EventLogSearchRequest] [The search criteria and pagination information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec search_event_logs(request :: EventLogSearchRequest) :: FusionAuth.ClientResponse()
  def search_event_logs(request) do
    start
    |> uri("/api/system/event-log/search")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Searches the login records with the specified criteria and pagination.

  ## Parameters

    - request: [LoginRecordSearchRequest] [The search criteria and pagination information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec search_login_records(request :: LoginRecordSearchRequest) :: FusionAuth.ClientResponse()
  def search_login_records(request) do
    start
    |> uri("/api/system/login-record/search")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Retrieves the users for the given ids. If any id is invalid, it is ignored.

  ## Parameters

    - ids: [list()] [The user ids to search for.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.

  @deprecated This method has been renamed to search_users_by_ids, use that method instead.
  """
  @spec search_users(ids :: list()) :: FusionAuth.ClientResponse()
  def search_users(ids) do
    start
    |> uri("/api/user/search")
    |> url_parameter("ids", ids)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the users for the given ids. If any id is invalid, it is ignored.

  ## Parameters

    - ids: [list()] [The user ids to search for.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec search_users_by_ids(ids :: list()) :: FusionAuth.ClientResponse()
  def search_users_by_ids(ids) do
    start
    |> uri("/api/user/search")
    |> url_parameter("ids", ids)
    |> get()
    |> go()
  end

  @doc """
  Retrieves the users for the given search criteria and pagination.

  ## Parameters

    - request: [SearchRequest] [The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,, and sortFields.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec search_users_by_query(request :: SearchRequest) :: FusionAuth.ClientResponse()
  def search_users_by_query(request) do
    start
    |> uri("/api/user/search")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Retrieves the users for the given search criteria and pagination.

  ## Parameters

    - request: [SearchRequest] [The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,, and sortFields.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.

  @deprecated This method has been renamed to search_users_by_query, use that method instead.
  """
  @spec search_users_by_query_string(request :: SearchRequest) :: FusionAuth.ClientResponse()
  def search_users_by_query_string(request) do
    start
    |> uri("/api/user/search")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
  pairs in the email template.

  ## Parameters

    - email_template_id: [String.t()] [The id for the template.]
  ## Parameters

    - request: [SendRequest] [The send email request that contains all of the information used to send the email.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec send_email(email_template_id :: String.t(), request :: SendRequest) :: FusionAuth.ClientResponse()
  def send_email(email_template_id, request) do
    start
    |> uri("/api/email/send")
    |> url_segment(email_template_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.

  ## Parameters

    - request: [FamilyEmailRequest] [The request object that contains the parent email.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec send_family_request_email(request :: FamilyEmailRequest) :: FusionAuth.ClientResponse()
  def send_family_request_email(request) do
    start
    |> uri("/api/user/family/request")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Send a passwordless authentication code in an email to complete login.

  ## Parameters

    - request: [PasswordlessSendRequest] [The passwordless send request that contains all of the information used to send an email containing a code.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec send_passwordless_code(request :: PasswordlessSendRequest) :: FusionAuth.ClientResponse()
  def send_passwordless_code(request) do
    startAnonymous
    |> uri("/api/passwordless/send")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.

  ## Parameters

    - request: [TwoFactorSendRequest] [The request object that contains all of the information used to send the code.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec send_two_factor_code(request :: TwoFactorSendRequest) :: FusionAuth.ClientResponse()
  def send_two_factor_code(request) do
    start
    |> uri("/api/two-factor/send")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Send a Two Factor authentication code to allow the completion of Two Factor authentication.

  ## Parameters

    - two_factor_id: [String.t()] [The Id returned by the Login API necessary to complete Two Factor authentication.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec send_two_factor_code_for_login(two_factor_id :: String.t()) :: FusionAuth.ClientResponse()
  def send_two_factor_code_for_login(two_factor_id) do
    startAnonymous
    |> uri("/api/two-factor/send")
    |> url_segment(two_factor_id)
    |> post()
    |> go()
  end

  @doc """
  Begins a login request for a 3rd party login that requires user interaction such as HYPR.

  ## Parameters

    - request: [IdentityProviderStartLoginRequest] [The third-party login request that contains information from the third-party login, providers that FusionAuth uses to reconcile the user's account.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec start_identity_provider_login(request :: IdentityProviderStartLoginRequest) :: FusionAuth.ClientResponse()
  def start_identity_provider_login(request) do
    start
    |> uri("/api/identity-provider/start")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Start a passwordless login request by generating a passwordless code. This code can be sent to the User using the Send
  Passwordless Code API or using a mechanism outside of FusionAuth. The passwordless login is completed by using the Passwordless Login API with this code.

  ## Parameters

    - request: [PasswordlessStartRequest] [The passwordless start request that contains all of the information used to begin the passwordless login request.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec start_passwordless_login(request :: PasswordlessStartRequest) :: FusionAuth.ClientResponse()
  def start_passwordless_login(request) do
    start
    |> uri("/api/passwordless/start")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Complete login using a 2FA challenge

  ## Parameters

    - request: [TwoFactorLoginRequest] [The login request that contains the user credentials used to log them in.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec two_factor_login(request :: TwoFactorLoginRequest) :: FusionAuth.ClientResponse()
  def two_factor_login(request) do
    startAnonymous
    |> uri("/api/two-factor/login")
    |> body_handler(Utilities.new_body_handler(request))
    |> post()
    |> go()
  end

  @doc """
  Updates the application with the given Id.

  ## Parameters

    - application_id: [String.t()] [The Id of the application to update.]
  ## Parameters

    - request: [ApplicationRequest] [The request that contains all of the new application information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_application(application_id :: String.t(), request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def update_application(application_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the application role with the given id for the application.

  ## Parameters

    - application_id: [String.t()] [The Id of the application that the role belongs to.]
  ## Parameters

  ## Parameters

    - role_id: [String.t()] [The Id of the role to update.]
  ## Parameters

    - request: [ApplicationRequest] [The request that contains all of the new role information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_application_role(application_id :: String.t(), role_id :: String.t(), request :: ApplicationRequest) :: FusionAuth.ClientResponse()
  def update_application_role(application_id, role_id, request) do
    start
    |> uri("/api/application")
    |> url_segment(application_id)
    |> url_segment("role")
    |> url_segment(role_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the connector with the given Id.

  ## Parameters

    - connector_id: [String.t()] [The Id of the connector to update.]
  ## Parameters

    - request: [ConnectorRequest] [The request object that contains all of the new connector information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_connector(connector_id :: String.t(), request :: ConnectorRequest) :: FusionAuth.ClientResponse()
  def update_connector(connector_id, request) do
    start
    |> uri("/api/connector")
    |> url_segment(connector_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the consent with the given Id.

  ## Parameters

    - consent_id: [String.t()] [The Id of the consent to update.]
  ## Parameters

    - request: [ConsentRequest] [The request that contains all of the new consent information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_consent(consent_id :: String.t(), request :: ConsentRequest) :: FusionAuth.ClientResponse()
  def update_consent(consent_id, request) do
    start
    |> uri("/api/consent")
    |> url_segment(consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the email template with the given Id.

  ## Parameters

    - email_template_id: [String.t()] [The Id of the email template to update.]
  ## Parameters

    - request: [EmailTemplateRequest] [The request that contains all of the new email template information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_email_template(email_template_id :: String.t(), request :: EmailTemplateRequest) :: FusionAuth.ClientResponse()
  def update_email_template(email_template_id, request) do
    start
    |> uri("/api/email/template")
    |> url_segment(email_template_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the form with the given Id.

  ## Parameters

    - form_id: [String.t()] [The Id of the form to update.]
  ## Parameters

    - request: [FormRequest] [The request object that contains all of the new form information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_form(form_id :: String.t(), request :: FormRequest) :: FusionAuth.ClientResponse()
  def update_form(form_id, request) do
    start
    |> uri("/api/form")
    |> url_segment(form_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the form field with the given Id.

  ## Parameters

    - field_id: [String.t()] [The Id of the form field to update.]
  ## Parameters

    - request: [FormFieldRequest] [The request object that contains all of the new form field information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_form_field(field_id :: String.t(), request :: FormFieldRequest) :: FusionAuth.ClientResponse()
  def update_form_field(field_id, request) do
    start
    |> uri("/api/form/field")
    |> url_segment(field_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the group with the given Id.

  ## Parameters

    - group_id: [String.t()] [The Id of the group to update.]
  ## Parameters

    - request: [GroupRequest] [The request that contains all of the new group information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_group(group_id :: String.t(), request :: GroupRequest) :: FusionAuth.ClientResponse()
  def update_group(group_id, request) do
    start
    |> uri("/api/group")
    |> url_segment(group_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the identity provider with the given Id.

  ## Parameters

    - identity_provider_id: [String.t()] [The Id of the identity provider to update.]
  ## Parameters

    - request: [IdentityProviderRequest] [The request object that contains the updated identity provider.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_identity_provider(identity_provider_id :: String.t(), request :: IdentityProviderRequest) :: FusionAuth.ClientResponse()
  def update_identity_provider(identity_provider_id, request) do
    start
    |> uri("/api/identity-provider")
    |> url_segment(identity_provider_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the available integrations.

  ## Parameters

    - request: [IntegrationRequest] [The request that contains all of the new integration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_integrations(request :: IntegrationRequest) :: FusionAuth.ClientResponse()
  def update_integrations(request) do
    start
    |> uri("/api/integration")
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the key with the given Id.

  ## Parameters

    - key_id: [String.t()] [The Id of the key to update.]
  ## Parameters

    - request: [KeyRequest] [The request that contains all of the new key information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_key(key_id :: String.t(), request :: KeyRequest) :: FusionAuth.ClientResponse()
  def update_key(key_id, request) do
    start
    |> uri("/api/key")
    |> url_segment(key_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the lambda with the given Id.

  ## Parameters

    - lambda_id: [String.t()] [The Id of the lambda to update.]
  ## Parameters

    - request: [LambdaRequest] [The request that contains all of the new lambda information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_lambda(lambda_id :: String.t(), request :: LambdaRequest) :: FusionAuth.ClientResponse()
  def update_lambda(lambda_id, request) do
    start
    |> uri("/api/lambda")
    |> url_segment(lambda_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the registration for the user with the given id and the application defined in the request.

  ## Parameters

    - user_id: [String.t()] [The Id of the user whose registration is going to be updated.]
  ## Parameters

    - request: [RegistrationRequest] [The request that contains all of the new registration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_registration(user_id :: String.t(), request :: RegistrationRequest) :: FusionAuth.ClientResponse()
  def update_registration(user_id, request) do
    start
    |> uri("/api/user/registration")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the system configuration.

  ## Parameters

    - request: [SystemConfigurationRequest] [The request that contains all of the new system configuration information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_system_configuration(request :: SystemConfigurationRequest) :: FusionAuth.ClientResponse()
  def update_system_configuration(request) do
    start
    |> uri("/api/system-configuration")
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the tenant with the given Id.

  ## Parameters

    - tenant_id: [String.t()] [The Id of the tenant to update.]
  ## Parameters

    - request: [TenantRequest] [The request that contains all of the new tenant information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_tenant(tenant_id :: String.t(), request :: TenantRequest) :: FusionAuth.ClientResponse()
  def update_tenant(tenant_id, request) do
    start
    |> uri("/api/tenant")
    |> url_segment(tenant_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the theme with the given Id.

  ## Parameters

    - theme_id: [String.t()] [The Id of the theme to update.]
  ## Parameters

    - request: [ThemeRequest] [The request that contains all of the new theme information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_theme(theme_id :: String.t(), request :: ThemeRequest) :: FusionAuth.ClientResponse()
  def update_theme(theme_id, request) do
    start
    |> uri("/api/theme")
    |> url_segment(theme_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the user with the given Id.

  ## Parameters

    - user_id: [String.t()] [The Id of the user to update.]
  ## Parameters

    - request: [UserRequest] [The request that contains all of the new user information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_user(user_id :: String.t(), request :: UserRequest) :: FusionAuth.ClientResponse()
  def update_user(user_id, request) do
    start
    |> uri("/api/user")
    |> url_segment(user_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the user action with the given Id.

  ## Parameters

    - user_action_id: [String.t()] [The Id of the user action to update.]
  ## Parameters

    - request: [UserActionRequest] [The request that contains all of the new user action information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_user_action(user_action_id :: String.t(), request :: UserActionRequest) :: FusionAuth.ClientResponse()
  def update_user_action(user_action_id, request) do
    start
    |> uri("/api/user-action")
    |> url_segment(user_action_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the user action reason with the given Id.

  ## Parameters

    - user_action_reason_id: [String.t()] [The Id of the user action reason to update.]
  ## Parameters

    - request: [UserActionReasonRequest] [The request that contains all of the new user action reason information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_user_action_reason(user_action_reason_id :: String.t(), request :: UserActionReasonRequest) :: FusionAuth.ClientResponse()
  def update_user_action_reason(user_action_reason_id, request) do
    start
    |> uri("/api/user-action-reason")
    |> url_segment(user_action_reason_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates a single User consent by Id.

  ## Parameters

    - user_consent_id: [String.t()] [The User Consent Id]
  ## Parameters

    - request: [UserConsentRequest] [The request that contains the user consent information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_user_consent(user_consent_id :: String.t(), request :: UserConsentRequest) :: FusionAuth.ClientResponse()
  def update_user_consent(user_consent_id, request) do
    start
    |> uri("/api/user/consent")
    |> url_segment(user_consent_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Updates the webhook with the given Id.

  ## Parameters

    - webhook_id: [String.t()] [The Id of the webhook to update.]
  ## Parameters

    - request: [WebhookRequest] [The request that contains all of the new webhook information.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec update_webhook(webhook_id :: String.t(), request :: WebhookRequest) :: FusionAuth.ClientResponse()
  def update_webhook(webhook_id, request) do
    start
    |> uri("/api/webhook")
    |> url_segment(webhook_id)
    |> body_handler(Utilities.new_body_handler(request))
    |> put()
    |> go()
  end

  @doc """
  Validates the end-user provided user_code from the user-interaction of the Device Authorization Grant.
  If you build your own activation form you should validate the user provided code prior to beginning the Authorization grant.

  ## Parameters

    - user_code: [String.t()] [The end-user verification code.]
  ## Parameters

    - client_id: [String.t()] [The client id.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec validate_device(user_code :: String.t(), client_id :: String.t()) :: FusionAuth.ClientResponse()
  def validate_device(user_code, client_id) do
    startAnonymous
    |> uri("/oauth2/device/validate")
    |> url_parameter("user_code", user_code)
    |> url_parameter("client_id", client_id)
    |> get()
    |> go()
  end

  @doc """
  Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
  signed and not expired.
  <p>
  This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.

  ## Parameters

    - encoded_jwt: [String.t()] [The encoded JWT (access token).]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec validate_jwt(encoded_jwt :: String.t()) :: FusionAuth.ClientResponse()
  def validate_jwt(encoded_jwt) do
    startAnonymous
    |> uri("/api/jwt/validate")
    |> authorization("Bearer " + encoded_jwt)
    |> get()
    |> go()
  end

  @doc """
  Confirms a email verification. The Id given is usually from an email sent to the user.

  ## Parameters

    - verification_id: [String.t()] [The email verification id sent to the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec verify_email(verification_id :: String.t()) :: FusionAuth.ClientResponse()
  def verify_email(verification_id) do
    startAnonymous
    |> uri("/api/user/verify-email")
    |> url_segment(verification_id)
    |> post()
    |> go()
  end

  @doc """
  Confirms an application registration. The Id given is usually from an email sent to the user.

  ## Parameters

    - verification_id: [String.t()] [The registration verification Id sent to the user.]

  Returns `FusionAuth.ClientResponse()`. The ClientResponse object.
  """
  @spec verify_registration(verification_id :: String.t()) :: FusionAuth.ClientResponse()
  def verify_registration(verification_id) do
    startAnonymous
    |> uri("/api/user/verify-registration")
    |> url_segment(verification_id)
    |> post()
    |> go()
  end

end
